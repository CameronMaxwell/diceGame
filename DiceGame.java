/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dicegame;
// Imports java.io, arraylist, and list
import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author camax5273
 */
public class DiceGame extends javax.swing.JFrame {
    // Creates the output file for saving points
    public static File f1 = new File("output.txt");
    // Creates list that stores objects
    List Dice = new ArrayList<DiceGameJava>();
    // Public variables for the player points, wager, player and computer dice total 
    public int PlayerPoints=500;
    public int Wager=0;
    public int PlayerDiceTotal=0;
    public int ComputerDiceTotal=0;
   
    
    /**
     * Creates new form DiceGame
     */
    public DiceGame() {
        initComponents();
        
        
        // This sets the different buttons to invisible and disabled at the start of the program 
        WagerInput.setVisible(false);
        WagerInput.setEnabled(false);
        WagerButton.setVisible(false);
        WagerButton.setEnabled(false);
        WagerPromptOutput.setVisible(false);
        WagerPromptOutput.setEnabled(false);
        ExitButton.setVisible(false);
        ExitButton.setEnabled(false);
        RollDiceButton.setVisible(false);
        RollDiceButton.setEnabled(false);
        PlayAgainButton.setVisible(false);
        PlayAgainButton.setEnabled(false);
        SaveGameButton.setVisible(false);
        SaveGameButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ProgramTitle = new javax.swing.JLabel();
        StartGameButton = new javax.swing.JButton();
        WagerButton = new javax.swing.JButton();
        WagerPromptOutput = new javax.swing.JLabel();
        WagerInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputArea = new javax.swing.JTextArea();
        ExitButton = new javax.swing.JButton();
        RollDiceButton = new javax.swing.JButton();
        PlayAgainButton = new javax.swing.JButton();
        SaveGameButton = new javax.swing.JButton();
        LoadGameButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        ProgramTitle.setFont(new java.awt.Font("Segoe Script", 0, 36)); // NOI18N
        ProgramTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProgramTitle.setText("          Dice Game");

        StartGameButton.setBackground(new java.awt.Color(255, 153, 0));
        StartGameButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        StartGameButton.setText("Start Game");
        StartGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartGameButtonActionPerformed(evt);
            }
        });

        WagerButton.setBackground(new java.awt.Color(255, 153, 0));
        WagerButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        WagerButton.setText("Wager");
        WagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WagerButtonActionPerformed(evt);
            }
        });

        WagerPromptOutput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WagerPromptOutput.setText("Wager Prompt");

        WagerInput.setBackground(new java.awt.Color(255, 153, 0));

        OutputArea.setColumns(20);
        OutputArea.setRows(5);
        OutputArea.setText("Welcome to the Dice Game! \nHow To Play: You will start the game with 500 points, or you can load in a previously saved \ngame. After entering a wager amount, you will click the \"Roll Dice\" button to roll 2 dice \nfor you and the computer. If your dice total is higher than the computer, you will win the \namount of points wagered. If your total is lower, you will lose your wagered points. \nAfter playing, you can play again with your current points, save the game to continue later, \nor quit without saving to keep your previous saved points.");
        jScrollPane1.setViewportView(OutputArea);

        ExitButton.setBackground(new java.awt.Color(255, 153, 0));
        ExitButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        ExitButton.setText("EXIT");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        RollDiceButton.setBackground(new java.awt.Color(255, 153, 0));
        RollDiceButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        RollDiceButton.setText("Roll Dice");
        RollDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RollDiceButtonActionPerformed(evt);
            }
        });

        PlayAgainButton.setBackground(new java.awt.Color(255, 153, 0));
        PlayAgainButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        PlayAgainButton.setText("Play Again");
        PlayAgainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayAgainButtonActionPerformed(evt);
            }
        });

        SaveGameButton.setBackground(new java.awt.Color(255, 153, 0));
        SaveGameButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        SaveGameButton.setText("Save Game");
        SaveGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveGameButtonActionPerformed(evt);
            }
        });

        LoadGameButton.setBackground(new java.awt.Color(255, 153, 0));
        LoadGameButton.setFont(new java.awt.Font("Segoe Script", 0, 18)); // NOI18N
        LoadGameButton.setText("Load Game");
        LoadGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadGameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(ProgramTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 165, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlayAgainButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(StartGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LoadGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WagerPromptOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(WagerInput, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WagerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RollDiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))))
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ProgramTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(LoadGameButton)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(StartGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(WagerPromptOutput)
                        .addComponent(WagerInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(WagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(RollDiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SaveGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlayAgainButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(222, 222, 222))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartGameButtonActionPerformed
        // TODO add your handling code here:
        
        // This enables/disables multiple buttons when you press start game 
        RollDiceButton.setVisible(false);
        RollDiceButton.setEnabled(false);
        WagerButton.setVisible(true);
        WagerButton.setEnabled(true);
        WagerPromptOutput.setVisible(true);
        WagerPromptOutput.setEnabled(true);
        WagerInput.setVisible(true);
        WagerInput.setEnabled(true);
        StartGameButton.setVisible(false);
        StartGameButton.setEnabled(false);
        LoadGameButton.setVisible(false);
        LoadGameButton.setEnabled(false);
        
        // Sets the wager text box to ask the user how many points they want to wager before starting the game
        WagerPromptOutput.setText("How much would you like to wager? You have "+ PlayerPoints +" points.");
        // Sets the output area to display how many points the user has and prompts them to enter a wager to continue
        OutputArea.setText("You have "+ PlayerPoints +" points. Enter amount of points to wager and press wager button to continue. (Enter -1 to quit)");
        
    }//GEN-LAST:event_StartGameButtonActionPerformed

    private void WagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WagerButtonActionPerformed
        // TODO add your handling code here:
        // Gets the inputed wager value and stores it as the new variable value
        Wager = Integer.parseInt(WagerInput.getText());
        // Tells the user that they have entered a wager value larger than the amount of points they have available and to try again
        if (Wager > PlayerPoints){
            OutputArea.setText("You only have "+ PlayerPoints +" points available. Please enter a wager less than or equal to "+ PlayerPoints +" and try again. (-1 to exit)");
        }
        // Tells the user that they must enter a wager that is atleast one point for if they entered 0 
        if (Wager == 0){
            OutputArea.setText("You must wager atleast one (1) point! Re-enter wager and try again. (-1 to exit)");
        }
        // If the user types in -1 ro quit, it will set text to say thanks for playing and to press exit button 
        if (Wager == -1){
            OutputArea.setText("Thank you for playing! Press the exit button to close program.");
            // Enables and disables multiple buttons for the end of the game
            ExitButton.setVisible(true);
            ExitButton.setEnabled(true); 
            WagerInput.setVisible(false);
            WagerInput.setEnabled(false);
            WagerButton.setVisible(false);
            WagerButton.setEnabled(false);
            WagerPromptOutput.setVisible(false);
            WagerPromptOutput.setEnabled(false);
            
        }
        // When the user has entered a valid wager, program will enable and disable different buttons
        if (Wager > 0 &&  Wager <= PlayerPoints){
            RollDiceButton.setVisible(true);
            RollDiceButton.setEnabled(true);
            WagerInput.setVisible(false);
            WagerInput.setEnabled(false);
            WagerButton.setVisible(false);
            WagerButton.setEnabled(false);
            WagerPromptOutput.setVisible(false);
            WagerPromptOutput.setEnabled(false);
            // Outputs message saying how many points they have wagered and to press the roll dice button to continue playing 
            OutputArea.setText("You have wagered "+ Wager +" point(s). Press roll dice button to play.");
        }
        
        
        
        
    }//GEN-LAST:event_WagerButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        // Program closes when exit button is pressed
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void RollDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RollDiceButtonActionPerformed
        // TODO add your handling code here:
        // Program will generate 2 random numbers between 1 and 6 for the computer and store values as dice roll 1 and 2
        int PlayerDiceRollOne = (int) ((Math.random() * 6) + 1);
        int PlayerDiceRollTwo = (int) ((Math.random() * 6) + 1);
        PlayerDiceTotal = PlayerDiceRollOne + PlayerDiceRollTwo;
        
        // Program will generate 2 random numbers between 1 and 6 for the computer and store values as dice roll 1 and 2
        int ComputerDiceRollOne = (int) ((Math.random() * 6) + 1);
        int ComputerDiceRollTwo = (int) ((Math.random() * 6) + 1);
        ComputerDiceTotal = ComputerDiceRollOne + ComputerDiceRollTwo;
        // Creates the variable for the arraylist
        DiceGameJava dg = new DiceGameJava(PlayerDiceRollOne,PlayerDiceRollTwo,PlayerDiceTotal,ComputerDiceRollOne,ComputerDiceRollTwo,ComputerDiceTotal);
        // Adds the object to the list when roll dice button is pressed 
        Dice.add(dg);
        // Sets text that will act as a header for the dice roll values to keep it organized 
        OutputArea.setText("Player Dice Roll One\tPlayer Dice Roll Two\tPlayer Dice Total\tComputer Dice Roll One\tComputer Dice Roll Two\tComputer Dice Total\n");
        // Outputs the dice values that were generated 
        OutputArea.append(dg.toString());
        // When the dice totals are equal to eachother, it will set output text to ask user to roll the dice again 
        if(PlayerDiceTotal == ComputerDiceTotal){
            OutputArea.append(" Your dice total is equal to the computer's dice total! Press roll dice button to roll again. \n");
            
        }
        // If the player's dice roll is higher than the computer's total, it will add the wagered points to the users point total and endgame buttons will appear
        if(PlayerDiceTotal > ComputerDiceTotal){
            RollDiceButton.setVisible(false);
            RollDiceButton.setEnabled(false);
            ExitButton.setVisible(true);
            ExitButton.setEnabled(true); 
            PlayAgainButton.setVisible(true);
            PlayAgainButton.setEnabled(true);
            SaveGameButton.setVisible(true);
            SaveGameButton.setEnabled(true);
            // Adds wagered points to the users total 
            PlayerPoints += (Wager);
            // Sets output to say user has won and their new point total 
            OutputArea.append("Your dice total is higher than the computer's total! You have won "+ Wager +" point(s). Your new point total is "+ PlayerPoints +". Press the exit button to exit or the play again button to play again.\n");
            
        }
        // If the computer's dice total is higher, player will lose the wagered points from their total
        if(PlayerDiceTotal < ComputerDiceTotal){
            RollDiceButton.setVisible(false);
            RollDiceButton.setEnabled(false);
            PlayerPoints -= (Wager);
            // If the player loses but they still have points remaining, endgame buttons will appear
            if(PlayerPoints > 0){
                PlayAgainButton.setVisible(true);
                PlayAgainButton.setEnabled(true);
                ExitButton.setVisible(true);
                ExitButton.setEnabled(true);
                SaveGameButton.setVisible(true);
                SaveGameButton.setEnabled(true);
                // Sets output area to say the user has lost their wager, their new point balance, and ask them to continue playing or quit the game
                OutputArea.append("Your dice total is less than the computer's total! You have lost "+ Wager +" point(s). Your new point total is "+ PlayerPoints +". Press the exit button to exit or the play again button to play again.\n");
            }
            // If the player has 0 points remaining after the wagered points have been deducted, endgame buttons will appear and output area will say they have no points remaining 
            if(PlayerPoints == 0){
                ExitButton.setVisible(true);
                ExitButton.setEnabled(true);
                PlayAgainButton.setVisible(false);
                PlayAgainButton.setEnabled(false);
                OutputArea.append("Your dice total is less than the computer's total! You have lost "+ Wager +" point(s). You have no points remaining!\n");
                
            }
        }
    }//GEN-LAST:event_RollDiceButtonActionPerformed

    private void PlayAgainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayAgainButtonActionPerformed
        // TODO add your handling code here:
        // When user wants to continue playing, startgame buttons will appear again and the output area will be set to blank for them to play again 
        ExitButton.setVisible(false);
        ExitButton.setEnabled(false); 
        PlayAgainButton.setVisible(false);
        PlayAgainButton.setEnabled(false);
        StartGameButton.setVisible(true);
        StartGameButton.setEnabled(true);
        SaveGameButton.setVisible(false);
        SaveGameButton.setEnabled(false);
        LoadGameButton.setVisible(true);
        LoadGameButton.setEnabled(true);
        OutputArea.setText("");
        
        
    }//GEN-LAST:event_PlayAgainButtonActionPerformed

    private void SaveGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveGameButtonActionPerformed
        // TODO add your handling code here:
        // Creates string input variable equalling the player's points
        String input = PlayerPoints+"";
        // Writes the current player points to the file and saves it 
        WriteToFile(f1,input);
        SaveGameButton.setVisible(false);
        SaveGameButton.setEnabled(false);
        // Tells user that their game has been saved 
        OutputArea.setText ("Your game has been saved!");
        
        
        
    }//GEN-LAST:event_SaveGameButtonActionPerformed

    private void LoadGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadGameButtonActionPerformed
        // TODO add your handling code here:
        // After pressing load game, multiple buttons will enable and disable to set the game up 
        RollDiceButton.setVisible(false);
        RollDiceButton.setEnabled(false);
        WagerButton.setVisible(true);
        WagerButton.setEnabled(true);
        WagerPromptOutput.setVisible(true);
        WagerPromptOutput.setEnabled(true);
        WagerInput.setVisible(true);
        WagerInput.setEnabled(true);
        StartGameButton.setVisible(false);
        StartGameButton.setEnabled(false);
        LoadGameButton.setVisible(false);
        LoadGameButton.setEnabled(false);
        // Program will see if file exists, if not it will create one
        try{
            if(!f1.exists()){
                f1.createNewFile();
            // After a file has been created or found, it will read the latest saved point balance and set it as the current player points for the next game
            }else{
                PlayerPoints=ReadFromFile(f1);
                // Asks user how much points they would like to wager
                WagerPromptOutput.setText("How much would you like to wager? You have "+ PlayerPoints +" points.");
                // Sets output area to say how many points the user has and to press wager button to continue playing 
                OutputArea.setText("You have "+ PlayerPoints +" points. Enter amount of points to wager and press wager button to continue. (Enter -1 to quit)");
            }
        // If an error occurs in the try, system will output saying file not found
        }catch(FileNotFoundException e){
            System.out.print("File Not Found");
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }
        
       
        
    }//GEN-LAST:event_LoadGameButtonActionPerformed

    public static void WriteToFile(File f, String s){
        // This function adds the inputed book to the output file
        try{
            // This opens the stream to write
            // True allows it to be rewritten to it
            FileWriter fw = new FileWriter(f, true);
            // This puts in the text
            // To the document
            BufferedWriter bw = new BufferedWriter(fw);
          
            bw.write(s);
            bw.newLine();
            // This is needed to save it
            bw.close();
            
        }catch(IOException e){
            e.printStackTrace();
        }
    }
   
    public int ReadFromFile(File f){
        // This reads all of the inputed books from the output file
        int total =0;
        try{
           // Creates the file reader 
           FileReader fr = new FileReader(f);
           BufferedReader br = new BufferedReader(fr);
           // Get the first line
           String line = br.readLine();
           // This sets a title to the list to keep the stored information organized
           OutputArea.append("\n");
           while(line != null){
               // Outputs line with the latest saved point value
               OutputArea.append(line+"\n");
               total = Integer.parseInt(line);
               line = br.readLine(); 
               
            }
            
            br.close();
        }catch(IOException e){
            e.printStackTrace();
        }
        // Returns the variable 
        return total;
        
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiceGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiceGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiceGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiceGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DiceGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton LoadGameButton;
    private javax.swing.JTextArea OutputArea;
    private javax.swing.JButton PlayAgainButton;
    private javax.swing.JLabel ProgramTitle;
    private javax.swing.JButton RollDiceButton;
    private javax.swing.JButton SaveGameButton;
    private javax.swing.JButton StartGameButton;
    private javax.swing.JButton WagerButton;
    private javax.swing.JTextField WagerInput;
    private javax.swing.JLabel WagerPromptOutput;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
